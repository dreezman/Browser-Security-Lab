##
# This config is configured specifically for an Angular SPA config. NGINX will serve up the Angular SPA app and
# insert a CSP controls and nonces into 
#      1) HTTP response headers 
#	   2) Inside JS files that are served up by NGINX to the web browsers
# 
##

# Default server configuration
#
server {
	listen ${NGINX__PORT}; default_server;
	listen [::]:${NGINX__PORT}; default_server;

	root ${NGINX__ROOTDIR};

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	# create random nonce value for CSP that is used by all the pages
	set_secure_random_alphanum $cspNonce 32;

	# nginx error logging
	error_log /var/log/nginx/debug.log debug;

	# default location block for all requests
	location / {

			# We are looking for the Angular dist index.html file which looks like this
			###################################################
			#<!doctype html>
			#<html lang="en">#
			#	<head>
			#		<meta charset="utf-8"/>
			#		<title>Customer Registry</title>
			#		<base href="/"/>
			#		<meta name="viewport" content="width=device-width, initial-scale=1"/>
			#		<link rel="icon" type="image/x-icon" href="favicon.ico"/>
			#	<link rel="stylesheet" href="styles.583388824f5c2c91.css"></head>
			#	<body>
			#		<customer-registry-root></customer-registry-root>
			#	<script src="runtime.d2cf65239380cc6a.js" type="module"></script><script src="polyfills.b9801e45ae9c484d.js" type="module"></script><script src="main.18bbabb8951aa2bc.js" type="module"></script></body>
			#</html>
			###################################################
			# Insert nonces into the JS files that NGINX is serving up
			# Look for patterns in the JS files and replace them with the nonce value
			sub_filter_once off;
			sub_filter_types *;
			# 'module' appears only in the index.html file. If we want the script to run, then insert a nonce
			# value into the script tag
			sub_filter  ' type="module"'     ' type="module" nonce=$cspNonce';
			#  Create a script that will save the nonce in a JS global variable to be used later inside a JS file
			#  insder the script before the <link> element
			sub_filter  '<link rel="stylesheet" href='     '<script nonce=$cspNonce>  window.nonceGlobalVariable="$cspNonce" </script> <link rel="stylesheet" href=';
			# add CSP header to ALL responses so the browser enforces policy	

			## This is the default policy that will be enforced by the browser
		 	## allow all pages from self and *.swops.cloud
			#  default-src 'self' *.swops.cloud; 
			#
			## Allow scripts from self and all sub-scripts they include to run as
			## well as scripts with nonce tags
			#  script-src 'self' 'strict-dynamic' 'nonce-$cspNonce' ; 
			#                                      
			## By default, put a nonce into all <style> elements and attributes
			#  style-src 'self' 'nonce-$cspNonce'; 
			#
			## Put a nonce into all <style> elements (not attributes) 
			#  style-src-elem 'self' 'nonce-$cspNonce';
			#
			## Put a nonce into all style attributes (not elements) 
			## like <div style="http:/someurl/">
			## or created by JS 
			## document.querySelector("div").setAttribute("style", "http:/someurl/);
			## document.querySelector("div").style.cssText = "http:/someurl/";
			##
			## unfortunalatey, let all style attributes execute for Snycfusion to work
			## with unsafe-inline. In theory, the Syncfusion template file was
			## santitized by the CodeBlue team of URIs.
			#  style-src-attr 'self' 'unsafe-inline';
			#
			## Allow fonts to be loaded from self and data: URIs
			#  font-src 'self' data: " 
			#
			## Always add the CSP header to the HTTP response, regardless of status
			#  always;					

			add_header Content-Security-Policy 
			    "default-src 'self' *.swops.cloud; 
				script-src 'self' 'strict-dynamic' 'nonce-$cspNonce' ; 
				style-src 'self' 'nonce-$cspNonce'; style-src-elem 'self' 'nonce-$cspNonce';
				style-src-attr 'self' 'unsafe-inline'; font-src 'self' data: " 
				always;					
			# First attempt to serve request as file, then
			# as directory, then fall back to displaying a 404.
			try_files $uri $uri/ /index.html =404;
	}

	# All 747.xxxxxxx.js files are created by Angular and Syncfusion to dynamically load CSS files
	# and styles. Unfortunately these JS files have several eval() and new Function() calls that
	# violate CSP. So we have to allow them to run by setting unsafe-eval in the CSP header.
	location ~ ^/747.*\.js$ {
		
		error_log /var/log/nginx/debug.log debug;
		# This will replace the string **CSP_NONCE** with the value of $cspNonce
		# in scripts nginx serves
		sub_filter_once off;
		sub_filter_types *;
		# There is a line in the 747 which dynamically creates styles. Insert a nonce to allow the style
		# to be created. Use the saved global variable from above.
		sub_filter  'Ti.textContent=ti,' 'Ti.textContent=ti, Ti.setAttribute("nonce",window.nonceGlobalVariable) ,';
		# add CSP header to the 747 HTTP responses to allow eval() and new Function() calls..unfortunately.
		# FYI there is a bug in Chrome which required me to add 'unsafe-eval' to the default-src
		# to make it to work. It worked in Firefox without it.	
		add_header Content-Security-Policy 
			"default-src 'unsafe-eval'; 
			script-src 'unsafe-eval' ; 
			style-src 'self' 'nonce-$cspNonce'; 
			style-src-elem 'self' 'nonce-$cspNonce';
			style-src-attr 'self' 'unsafe-inline'; 
			font-src 'self' data: " always;		

	}
	# All requests that are not referencing the front-end to serve up JS files via index.html 
	# are API calls to the backend server.
	# like https://customer.registry.labs.swops.cloud/somedirectory/someapi-call
	# These are redirected to the backend server for authentication and API requests.
	# 
	location ~* /.+/.* {

		# forward all requests to the backend server
		proxy_pass https://customer.registry.labs.swops.cloud;
		# remove the CSP headers from the response so the browser does not enforce the the wrong policy
		# this is necessary because the backend server may not be configured to serve up the correct CSP headers	  
		proxy_hide_header Content-Security-Policy;
		proxy_hide_header Content-Security-Policy-Report-Only;
		proxy_set_header Accept-Encoding "";


	}    

}